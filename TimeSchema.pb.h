// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TimeSchema.proto

#ifndef PROTOBUF_TimeSchema_2eproto__INCLUDED
#define PROTOBUF_TimeSchema_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TimeSchema_2eproto();
void protobuf_AssignDesc_TimeSchema_2eproto();
void protobuf_ShutdownFile_TimeSchema_2eproto();

class TimeStamp;
class HeartMsg;

// ===================================================================

class TimeStamp : public ::google::protobuf::Message {
 public:
  TimeStamp();
  virtual ~TimeStamp();

  TimeStamp(const TimeStamp& from);

  inline TimeStamp& operator=(const TimeStamp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeStamp& default_instance();

  void Swap(TimeStamp* other);

  // implements Message ----------------------------------------------

  TimeStamp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimeStamp& from);
  void MergeFrom(const TimeStamp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  inline void set_allocated_time(::std::string* time);

  // required uint64 Tick = 2;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 2;
  inline ::google::protobuf::uint64 tick() const;
  inline void set_tick(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:TimeStamp)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_tick();
  inline void clear_has_tick();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* time_;
  ::google::protobuf::uint64 tick_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TimeSchema_2eproto();
  friend void protobuf_AssignDesc_TimeSchema_2eproto();
  friend void protobuf_ShutdownFile_TimeSchema_2eproto();

  void InitAsDefaultInstance();
  static TimeStamp* default_instance_;
};
// -------------------------------------------------------------------

class HeartMsg : public ::google::protobuf::Message {
 public:
  HeartMsg();
  virtual ~HeartMsg();

  HeartMsg(const HeartMsg& from);

  inline HeartMsg& operator=(const HeartMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartMsg& default_instance();

  void Swap(HeartMsg* other);

  // implements Message ----------------------------------------------

  HeartMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartMsg& from);
  void MergeFrom(const HeartMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 Tick = 1;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 1;
  inline ::google::protobuf::uint32 tick() const;
  inline void set_tick(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:HeartMsg)
 private:
  inline void set_has_tick();
  inline void clear_has_tick();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 tick_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TimeSchema_2eproto();
  friend void protobuf_AssignDesc_TimeSchema_2eproto();
  friend void protobuf_ShutdownFile_TimeSchema_2eproto();

  void InitAsDefaultInstance();
  static HeartMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// TimeStamp

// required string Time = 1;
inline bool TimeStamp::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeStamp::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeStamp::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeStamp::clear_time() {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& TimeStamp::time() const {
  return *time_;
}
inline void TimeStamp::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void TimeStamp::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void TimeStamp::set_time(const char* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TimeStamp::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  return time_;
}
inline ::std::string* TimeStamp::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TimeStamp::set_allocated_time(::std::string* time) {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (time) {
    set_has_time();
    time_ = time;
  } else {
    clear_has_time();
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 Tick = 2;
inline bool TimeStamp::has_tick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeStamp::set_has_tick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimeStamp::clear_has_tick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimeStamp::clear_tick() {
  tick_ = GOOGLE_ULONGLONG(0);
  clear_has_tick();
}
inline ::google::protobuf::uint64 TimeStamp::tick() const {
  return tick_;
}
inline void TimeStamp::set_tick(::google::protobuf::uint64 value) {
  set_has_tick();
  tick_ = value;
}

// -------------------------------------------------------------------

// HeartMsg

// required uint32 Tick = 1;
inline bool HeartMsg::has_tick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartMsg::set_has_tick() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartMsg::clear_has_tick() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartMsg::clear_tick() {
  tick_ = 0u;
  clear_has_tick();
}
inline ::google::protobuf::uint32 HeartMsg::tick() const {
  return tick_;
}
inline void HeartMsg::set_tick(::google::protobuf::uint32 value) {
  set_has_tick();
  tick_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TimeSchema_2eproto__INCLUDED
