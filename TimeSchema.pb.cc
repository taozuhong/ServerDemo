// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TimeSchema.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TimeSchema.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TimeStamp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeStamp_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TimeSchema_2eproto() {
  protobuf_AddDesc_TimeSchema_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TimeSchema.proto");
  GOOGLE_CHECK(file != NULL);
  TimeStamp_descriptor_ = file->message_type(0);
  static const int TimeStamp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeStamp, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeStamp, tick_),
  };
  TimeStamp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeStamp_descriptor_,
      TimeStamp::default_instance_,
      TimeStamp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeStamp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeStamp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeStamp));
  HeartMsg_descriptor_ = file->message_type(1);
  static const int HeartMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartMsg, tick_),
  };
  HeartMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartMsg_descriptor_,
      HeartMsg::default_instance_,
      HeartMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TimeSchema_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeStamp_descriptor_, &TimeStamp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartMsg_descriptor_, &HeartMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TimeSchema_2eproto() {
  delete TimeStamp::default_instance_;
  delete TimeStamp_reflection_;
  delete HeartMsg::default_instance_;
  delete HeartMsg_reflection_;
}

void protobuf_AddDesc_TimeSchema_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020TimeSchema.proto\"\'\n\tTimeStamp\022\014\n\004Time\030"
    "\001 \002(\t\022\014\n\004Tick\030\002 \002(\004\"\030\n\010HeartMsg\022\014\n\004Tick\030"
    "\001 \002(\r", 85);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TimeSchema.proto", &protobuf_RegisterTypes);
  TimeStamp::default_instance_ = new TimeStamp();
  HeartMsg::default_instance_ = new HeartMsg();
  TimeStamp::default_instance_->InitAsDefaultInstance();
  HeartMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TimeSchema_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TimeSchema_2eproto {
  StaticDescriptorInitializer_TimeSchema_2eproto() {
    protobuf_AddDesc_TimeSchema_2eproto();
  }
} static_descriptor_initializer_TimeSchema_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TimeStamp::kTimeFieldNumber;
const int TimeStamp::kTickFieldNumber;
#endif  // !_MSC_VER

TimeStamp::TimeStamp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimeStamp::InitAsDefaultInstance() {
}

TimeStamp::TimeStamp(const TimeStamp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimeStamp::SharedCtor() {
  _cached_size_ = 0;
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tick_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeStamp::~TimeStamp() {
  SharedDtor();
}

void TimeStamp::SharedDtor() {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (this != default_instance_) {
  }
}

void TimeStamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeStamp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeStamp_descriptor_;
}

const TimeStamp& TimeStamp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TimeSchema_2eproto();
  return *default_instance_;
}

TimeStamp* TimeStamp::default_instance_ = NULL;

TimeStamp* TimeStamp::New() const {
  return new TimeStamp;
}

void TimeStamp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
    tick_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeStamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Tick;
        break;
      }

      // required uint64 Tick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeStamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->time(), output);
  }

  // required uint64 Tick = 2;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->tick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimeStamp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->time(), target);
  }

  // required uint64 Tick = 2;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->tick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimeStamp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // required uint64 Tick = 2;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeStamp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeStamp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeStamp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeStamp::MergeFrom(const TimeStamp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeStamp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeStamp::CopyFrom(const TimeStamp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeStamp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TimeStamp::Swap(TimeStamp* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(tick_, other->tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeStamp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeStamp_descriptor_;
  metadata.reflection = TimeStamp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartMsg::kTickFieldNumber;
#endif  // !_MSC_VER

HeartMsg::HeartMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartMsg::InitAsDefaultInstance() {
}

HeartMsg::HeartMsg(const HeartMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartMsg::SharedCtor() {
  _cached_size_ = 0;
  tick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartMsg::~HeartMsg() {
  SharedDtor();
}

void HeartMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartMsg_descriptor_;
}

const HeartMsg& HeartMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TimeSchema_2eproto();
  return *default_instance_;
}

HeartMsg* HeartMsg::default_instance_ = NULL;

HeartMsg* HeartMsg::New() const {
  return new HeartMsg;
}

void HeartMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tick_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Tick = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Tick = 1;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Tick = 1;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Tick = 1;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartMsg::MergeFrom(const HeartMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tick()) {
      set_tick(from.tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartMsg::CopyFrom(const HeartMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HeartMsg::Swap(HeartMsg* other) {
  if (other != this) {
    std::swap(tick_, other->tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartMsg_descriptor_;
  metadata.reflection = HeartMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
